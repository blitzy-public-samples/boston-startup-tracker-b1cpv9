name: Frontend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm ci
      working-directory: ./frontend

    - name: Run tests
      run: npm test
      working-directory: ./frontend

    - name: Build application
      run: npm run build
      working-directory: ./frontend

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: <aws_region>

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: <ecr_repository_name>
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      working-directory: ./frontend

    - name: Deploy to S3
      run: |
        aws s3 sync ./build s3://<s3_bucket_name> --delete
      working-directory: ./frontend

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id <cloudfront_distribution_id> --paths "/*"

# Human tasks:
# - Replace `<aws_region>` with the AWS region where you want to deploy the application.
# - Replace `<ecr_repository_name>` with the name of your ECR repository.
# - Replace `<s3_bucket_name>` with the name of your S3 bucket.
# - Replace `<cloudfront_distribution_id>` with the ID of your CloudFront distribution.
# - Specify the appropriate Dockerfile path for the frontend application.
# - Define the necessary steps for building and pushing the Docker image to ECR.
# - Define the necessary steps for deploying the application to S3 and invalidating the CloudFront cache.