name: Backend CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Run tests
      run: |
        cd backend
        python -m pytest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: <aws_region>

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: <ecr_repository_name>
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG backend/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to Amazon ECS
      run: |
        aws ecs update-service --cluster <ecs_cluster_name> --service <ecs_service_name> --force-new-deployment

# Human tasks:
# - Replace `<aws_region>` with the AWS region where you want to deploy the application.
# - Replace `<ecr_repository_name>` with the name of your ECR repository.
# - Replace `<ecs_cluster_name>` with the name of your ECS cluster.
# - Replace `<ecs_service_name>` with the name of your ECS service.
# - Specify the appropriate Dockerfile path for the backend application.
# - Define the necessary steps for building and pushing the Docker image to ECR.
# - Define the necessary steps for deploying the application to ECS.